<<<?xml version="1.0" encoding="UTF-8" ?>>>

stylesheet \
  -xmlns:xml=http://www.w3.org/XML/1998/namespace \
  -xmlns:xsl=http://www.w3.org/1999/XSL/Transform \
  -xmlns:xs=http://www.w3.org/2001/XMLSchema \
  -xmlns:pg=http://schema.quizbowl.technology/xml/pg-dictionary \
  -xmlns=http://www.w3.org/1999/xhtml \
  -xmlns:html=http://www.w3.org/1999/xhtml \
  -xpath-default-namespace=http://schema.quizbowl.technology/xml/pg-dictionary \
  -exclude-result-prefixes=<{xs pg html}> \
  -version=2.0

  import functions.xsl
  output -method=xhtml -indent=yes -omit-xml-declaration=yes

  variable sitemap document('sitemap.xml') -as=document-node()

  template /
    variable context .
    for-each $sitemap/sitemap/section[@id='views']/page
      apply-templates $context restore-context
        with-param view @id -tunnel=yes
        with-param page . -tunnel=yes

  template / -mode=restore-context
    tempParam view yes
    result-document {$view}.html
      call-template skeleton

  templateN skeleton
    text yes <<&lt;!DOCTYPE html&gt;&#10;>>
    html -xml:lang=en \
      -xmlns:xlink=http://www.w3.org/1999/xlink
      head
        meta -charset=utf-8
        meta -name=viewport -content=width=device-width,initial-scale=1
        meta -name=google -content=notranslate
        link -type=text/css -rel=stylesheet -href=pg-dictionary.css
        script -type=text/javascript -src=controls.js
        title
          call-template fullTitle

      body
        # TODO: use &sect; instead of ^
        a -name=^top
        header -class=masthead
          h1
            a ./ <<Quizbowl Pronouncing Dictionary>>
          dl compact
            dt <<Editor>>
            dd <<Ophir Lifshitz>>

            dt <<Status>>
            dd
              <<Draft. Almost all entries not by >>
              a author.html#^OL author -data-author=OL <<OL>>
              << are unverified and are probably inaccurate.>>

            dt <<Last updated>>
            dd
              time
                value-of pg:format-date(current-dateTime())

          nav
            apply-templates $sitemap/sitemap

        call-template svgDefs

        apply-templates

  template sitemap
    dl compact
      apply-templates section

  template sitemap/section
    dt
      apply-templates name
    dd
      ul inline
        apply-templates page

  template sitemap/section/page
    li
      a {@id}.html
        apply-templates name

  templateN fullTitle
    tempParam page yes
    value-of $page/ancestor-or-self::*[not(@id=('pages'))]/name -separator=<(<< &#x203a; >>)>


  template /pg-dictionary
    tempParam view yes

    variable groups
      for-each-group entry -group-by=<{
          if ($view='index')      then @initial                   else
          if ($view='lang')       then lang                       else
          if ($view='category')   then usage/(category|context)   else
          if ($view='author')     then meta/author                else
          if ($view='tournament') then meta/quizbowl-source/@name else
          0}>
        sort current-grouping-key()
        pg:group -key={current-grouping-key()}
          pg:displayKey
            value-of current-grouping-key()
            choose
              when $view='lang'
                text <<: >>
                value-of pg:langLookupCanonicalName(current-grouping-key())
          copy-of current-group()
          # perform-sort current-group()
          #   sort -lang=fr -stable=yes

    article -class=dictionary
      call-template legend
        with-param groups $groups

      for-each $groups/group
        section
          h2 -id=^{@key}
            a #^{@key}
              call-template header
            call-template heading-right
          call-template columns

  templateN legend
    tempParam view yes
    param groups
    header
      p <<Jump to>>
      dl <(<<compact x>>)>
        for-each-group $groups/group -group-by=<{
          if ($view='tournament')      then tokenize(@key,' ')[1] else
          if (count($groups/group)<30) then ''                    else
          upper-case(substring(@key,1,1))}>
          dt
            value-of current-grouping-key()
          dd
            ul inline
              for-each current-group()
                li
                  a #^{@key} -title={displayKey}
                    value-of @key

  templateN header
    copy-of displayKey/node() -copy-namespaces=no

  template html:*
    copy

  templateN heading-right
    variable count count(..//entry)
    span heading-right
      text << >>
      value-of $count
      choose
        when $count=1 << entry>>
        otherwise << entries>>
      # TODO: get unique only (since a section can have duplicates, e.g. fr+es)
      if ../@family
        text << total>>
      text << >>
      a #^top <<Top &#x2191;>>

  templateN columns
    div columns
      apply-templates entry

  template <(<<date | submission | stemmable>>)>

  template entry
    div -id={@id}
      attribute class
        text <<entry keep>>
        if @exemplar
          text << exemplar>>

      a #{@id} mr
        apply-templates form/orth
      call-template sp

      span mr
        apply-templates form/pron
      call-template sp

      span <(<<etym mr>>)>
        apply-templates lang
      call-template sp

      apply-templates meta/author

      div usage
        apply-templates usage

      div citations
        for-each meta/citation
          sort @type
          apply-templates .
          if position()!=last()
            call-template orl

      div reviews
        apply-templates meta/review

      if meta/related-entries
        apply-templates meta/related-entries

      if meta/quizbowl-source
        apply-templates meta/quizbowl-source

  template (entry|example)/form/orth
    b -class=headword
      apply-templates
      apply-templates @lang
    call-template orsame

  template orth
    span orth
      if @lang
        attribute lang
          value-of @lang
      apply-templates
    apply-templates @lang
    call-template orsame

  template pron
    variable skip <(<<not(preceding-sibling::pron) or (@lang = preceding-sibling::pron/@lang)>>)>
    if not($skip)
      apply-templates @lang
    span
      choose
        when @notation='IPA'
          attribute class <<pron IPA>>
          # text <<[>>
          apply-templates
          # text <<]>>
        otherwise
          attribute class <<pron>>
          apply-templates
    if <(<<not(@lang) or @lang = following-sibling::pron/@lang>>)>
      call-template orsame

  # TODO improve
  template orth/@lang
    text <<&#xA0;>>
    span <(<<lang first last ml>>)>
      value-of .

  template pron/@lang
    call-template lang
      with class << first last>>
    text <<&#xA0;>>

  template lang
    call-template lang
      with class
        if not(preceding-sibling::lang) << main first>>
        if not(following-sibling::lang) << last>>

  templateN lang
    param class
    a lang.html#^{.} <(<<lang {$class}>>)> -title={.}
      value-of pg:langLookupCanonicalName(.)

  template usage/category|usage/context
    a category.html#^{.} {name()}
      apply-templates
    call-template or

  template usage/definition
    span {name()}
      apply-templates
    call-template or

  template review
    div review
      div review-flex
        if author
          span
            apply-templates author
            text <<: >>
        if @accuracy|@decipherability|@familiarity|@utility
          call-template radar
          call-template bar
      if notes
        span
          # TODO fix style
          text <<Note: >>
          apply-templates notes

  template citation
    if @url
      a {@url} link
        value-of @type
        << ref>>
      if <(<<count(*) > 0>>)>
        text <<: >>
    apply-templates

  template citation[@type='audio']
    span audio-controls
      audio -preload=none -src={@url}
      button -onclick=toggleAudio(this) <<&#x25BA;>>

  template author
    a author.html#^{.} author -data-author={.}
      value-of .

  template related-entries
    for-each-group ./related-entry -group-by=@rel
      div related-entry
        span h
          choose
            when @rel='canonical'
              <<canonical name>>
            when @rel='confusable'
              <<confusable with>>
            otherwise
              <<see also>>
        text << >>
        apply-templates current-group()

  template related-entry
    variable prefix -select=<{if (contains(@ref, '//')) then '' else '#'}>
    variable rel @rel
    a {$prefix}{@ref} link
      if @rel='canonical'
        attribute id
          value-of .
      apply-templates
    if following-sibling::related-entry[@rel=$rel]
      call-template orl

  template quizbowl-source
    div extlinks
      a https://forvo.com/search/{form/orth[1]} <<Forvo>>
      text << | >>
      a {@url} -title={name} -target=_blank
        text <<Locate>>
        if @name!='MW'
          text << in >>
          value-of @name
        text <<&#xA0;&#x00BB;>>

  template example
    blockquote -class=example
      apply-templates
