<<<?xml version="1.0" encoding="UTF-8" ?>>>

stylesheet \
  -xmlns:xml=http://www.w3.org/XML/1998/namespace \
  -xmlns:xsl=http://www.w3.org/1999/XSL/Transform \
  -xmlns:xs=http://www.w3.org/2001/XMLSchema \
  -xmlns:pg=http://schema.quizbowl.technology/xml/pg-dictionary \
  -xmlns=http://www.w3.org/1999/xhtml \
  -xmlns:html=http://www.w3.org/1999/xhtml \
  -xpath-default-namespace=http://schema.quizbowl.technology/xml/pg-dictionary \
  -exclude-result-prefixes=<{xs pg html}> \
  -version=2.0

  import functions.xsl
  output -method=xhtml -indent=yes -omit-xml-declaration=yes

  variable sitemap document('sitemap.xml') -as=document-node()

  template /
    variable context .
    for-each $sitemap/sitemap/section[@id='views']/page
      apply-templates $context restore-context
        with-param view @id -tunnel=yes
        with-param page . -tunnel=yes

  template / -mode=restore-context
    tempParam view yes
    result-document {$view}.html
      call-template skeleton

  templateN skeleton
    text yes <<&lt;!DOCTYPE html&gt;&#10;>>
    html -xml:lang=en \
      -xmlns:xlink=http://www.w3.org/1999/xlink
      head
        meta -charset=utf-8
        meta -name=viewport -content=width=device-width,initial-scale=1
        meta -name=google -content=notranslate
        link -type=text/css -rel=stylesheet -href=pg-dictionary.css
        script -type=text/javascript -src=controls.js
        title
          call-template fullTitle

      body
        # TODO: use &sect; instead of ^
        a -name=^top
        header -class=masthead
          h1
            a ./ <<Quizbowl Pronouncing Dictionary>>
          dl compact
            dt <<Editor>>
            dd <<Ophir Lifshitz>>

            dt <<Status>>
            dd
              text <<Draft. Almost all entries not by >>
              a author.html#^OL author -data-author=OL <<OL>>
              text << are unverified and are probably inaccurate.>>

            dt <<Last updated>>
            dd
              time
                value-of pg:format-date(current-dateTime())

          nav
            apply-templates $sitemap/sitemap

        call-template svgDefs

        apply-templates

  template sitemap
    dl compact
      apply-templates section

  template sitemap/section
    dt
      apply-templates name
    dd
      ul inline
        apply-templates page

  template sitemap/section/page
    li
      a {@id}.html
        apply-templates name

  templateN fullTitle
    tempParam page yes
    value-of $page/ancestor-or-self::*[not(@id=('pages'))]/name -separator=<(<< &#x203a; >>)>


  template /pg-dictionary
    tempParam view yes

    # 1. form groups
    variable groups
      root -xmlns=http://schema.quizbowl.technology/xml/pg-dictionary
        for-each-group entry -group-by=<{
            if ($view='index')                 then @initial                   else
            if (starts-with($view,'lang'))     then lang                       else
            if ($view='category')              then usage/(category|context)   else
            if ($view='author')                then meta/author                else
            if ($view='tournament')            then meta/quizbowl-source/@name else
            0}>

          sort current-grouping-key()
          section -key={current-grouping-key()}
            call-template addHeadingFlat
            sequence current-group()
            # preserve order from database for now
            # perform-sort current-group()
            #   sort -lang=en -stable=yes

    # 2. if family page, insert groups into section hierarchy by reverse lookup
    variable sections
      choose
        when ends-with($view,'family')
          variable hierarchy document('data/'||$view||'-tree.xml')/pg:root -as=node()

          apply-templates $hierarchy -mode=hierarchy
            with-param groups $groups/root/section -tunnel=yes
        otherwise
          sequence $groups

    # 3. output
    article -class=dictionary -id={$view}
      call-template legend
        with-param sections $sections
      apply-templates $sections/root/section


  template root|section -mode=hierarchy
    # 1. recurse into children
    variable children
      apply-templates -mode=hierarchy

    # 2. don't copy sections that ultimately contain no entries
    # TODO optimize by recursively returning the count instead of searching?
    # TODO fix copy/copy-of/sequence usage
    if count($children//entry)
      copy -copy-namespaces=no
        sequence @*
        if self::section
          heading -xmlns=http://schema.quizbowl.technology/xml/pg-dictionary
            value-of ancestor-or-self::section/@key -separator=<< / >>
            if join
              text <<: >>
              value-of pg:langLookupCanonicalName(@key)
        sequence $children

  template heading -mode=hierarchy
    sequence .

  # replaces <join/> in hierarchy with entry groups whose @key matches @key of <join/>'s parent
  # <section key="foo">                          <section key="foo">
  #  <section key="bar"><join/></section>   ->    <section key="bar"><entry/><entry/></section>...
  #  <section key="baz"><join/></section>        </section>
  template join -mode=hierarchy
    tempParam groups yes
    variable key ../@key
    sequence $groups[@key=$key]/entry

  template fallback -mode=hierarchy
    tempParam groups yes
    variable keysUsed //section/@key
    sequence $groups[not(@key=$keysUsed)]

  templateN addHeadingFlat
    tempParam view yes

    heading -xmlns=http://schema.quizbowl.technology/xml/pg-dictionary
      value-of current-grouping-key()
      choose
        when starts-with($view,'lang')
          text <<: >>
          value-of pg:langLookupCanonicalName(current-grouping-key())        
          #br -xmlns=http://www.w3.org/1999/xhtml

  templateN legend
    param sections
    header -class=legend
      p <<Jump to>>
      apply-templates $sections -mode=legend

  template root|section -mode=legend
    tempParam view yes

    variable count count(section)
    dl
      choose
        when <(<<ends-with($view,'family') and (@family or self::root)>>)>
          attribute class <<compact g>>
          for-each section[@family]
            dt
              a #^{@key} -title={heading}
                value-of tokenize(@key)[1]
            dd
              if section[not(@family)]
                ul inline
                  for-each section[not(@family)]
                    li
                      a #^{@key} -title={heading}
                        value-of @key
              apply-templates .[section[@family]] -mode=legend

        otherwise
          attribute class <<compact x>>
          # tournament: first word (year)
          # <30 groups: no alphabet index
          # otherwise:  first letter index
          for-each-group section -group-by=<{
              if ($view='tournament') then tokenize(@key)[1] else
              if ($count<30)          then ''                else
              upper-case(substring(@key,1,1))}>
            dt
              value-of current-grouping-key()
            dd
              ul inline
                for-each current-group()
                  li
                    a #^{@key} -title={heading}
                      value-of @key


  template section
    section
      apply-templates heading
      call-template columns
    apply-templates section

  template heading
    h2 -id=^{../@key}
      a #^{../@key}
        apply-templates
      call-template heading-right

  template html:*
    copy

  templateN heading-right
    variable count count(..//entry)
    span heading-right
      text << >>
      value-of $count
      choose
        when $count=1 << entry>>
        otherwise << entries>>
      # TODO: get unique only (since a section can have duplicates, e.g. fr+es)
      if ../@family
        text << total>>
      text << >>
      a #^top <<Top &#x2191;>>

  templateN columns
    div columns
      apply-templates entry

  template <(<<date | submission | stemmable>>)>


  template entry
    div -id={@id}
      attribute class
        text <<entry keep>>
        if @exemplar
          text << exemplar>>

      a #{@id} mr
        apply-templates form/orth
      call-template sp

      span mr
        apply-templates form/pron
      call-template sp

      span <(<<etym mr>>)>
        apply-templates lang
      call-template sp

      apply-templates meta/author

      div usage
        apply-templates usage

      div citations
        for-each meta/citation
          sort @type
          apply-templates .
          if position()!=last()
            call-template orl

      div reviews
        apply-templates meta/review

      if meta/related-entries
        apply-templates meta/related-entries

      if meta/quizbowl-source
        apply-templates meta/quizbowl-source

  template (entry|example)/form/orth
    b -class=headword
      apply-templates
      apply-templates @lang
    call-template orsame

  template orth
    span orth
      if @lang
        attribute lang
          value-of @lang
      apply-templates
    apply-templates @lang
    call-template orsame

  template pron
    variable skip <(<<not(preceding-sibling::pron) or (@lang = preceding-sibling::pron/@lang)>>)>
    if not($skip)
      apply-templates @lang
    span
      choose
        when @notation='IPA'
          attribute class <<pron IPA>>
          # text <<[>>
          apply-templates
          # text <<]>>
        otherwise
          attribute class <<pron>>
          apply-templates
    if <(<<not(@lang) or @lang = following-sibling::pron/@lang>>)>
      call-template orsame

  # TODO improve
  template orth/@lang
    text <<&#xA0;>>
    span <(<<lang first last ml>>)>
      value-of .

  template pron/@lang
    call-template lang
      with class << first last>>
    text <<&#xA0;>>

  template lang
    call-template lang
      with class
        if not(preceding-sibling::lang) << main first>>
        if not(following-sibling::lang) << last>>

  templateN lang
    param class
    a lang.html#^{.} <(<<lang {$class}>>)> -title={.}
      value-of pg:langLookupCanonicalName(.)

  template usage/category|usage/context
    a category.html#^{.} {name()}
      apply-templates
    call-template or

  template usage/definition
    span {name()}
      apply-templates
    call-template or

  template review
    div review
      div review-flex
        if author
          span
            apply-templates author
            text <<: >>
        if @accuracy|@decipherability|@familiarity|@utility
          call-template radar
          call-template bar
      if notes
        span
          # TODO fix style
          text <<Note: >>
          apply-templates notes

  template citation
    if @url
      a {@url} link
        value-of @type
        text << ref>>
      if <(<<count(*) > 0>>)>
        text <<: >>
    apply-templates

  template citation[@type='audio']
    span audio-controls
      audio -preload=none -src={@url}
      button -onclick=toggleAudio(this) <<&#x25BA;>>

  template author
    a author.html#^{.} author -data-author={.}
      value-of .

  template related-entries
    for-each-group ./related-entry -group-by=@rel
      div related-entry
        span h
          choose
            when @rel='canonical'
              <<canonical name>>
            when @rel='confusable'
              <<confusable with>>
            otherwise
              <<see also>>
        text << >>
        apply-templates current-group()

  template related-entry
    variable prefix -select=<{if (contains(@ref, '//')) then '' else '#'}>
    variable rel @rel
    a {$prefix}{@ref} link
      if @rel='canonical'
        attribute id
          value-of .
      apply-templates
    if following-sibling::related-entry[@rel=$rel]
      call-template orl

  template quizbowl-source
    div extlinks
      a https://forvo.com/search/{form/orth[1]} <<Forvo>>
      text << | >>
      a {@url} -title={name} -target=_blank
        text <<Locate>>
        if @name!='MW'
          text << in >>
          value-of @name
        text <<&#xA0;&#x00BB;>>

  template example
    blockquote -class=example
      apply-templates
